---
- setup:
  delegate_to: "{{ virt_install_vmhost }}"

- name: instala pacotes necessários - debian
  apt:
    name: "{{ item }}"
    state: present
    install_recommends: no
  with_items:
    - python-libvirt
    - virtinst
  delegate_to: "{{ virt_install_vmhost }}"
  when: ansible_os_family|lower == "debian"

- name: instala pacotes necessários - arch linux
  pacman:
    name: "{{ item }}"
    state: present
  with_items:
    - libvirt-python2
    - virt-install
  delegate_to: "{{ virt_install_vmhost }}"
  when: ansible_os_family|lower == "archlinux"

- name: verifica se máquina virtual existe
  virt:
    command: list_vms
  register: virt_vms
  check_mode: no
  delegate_to: "{{ virt_install_vmhost }}"

- block:

  - name: instala máquina virtual {{ virt_install_name }}
    connection: local
    shell: virt-install
      --connect qemu:///system 
      --name {{ virt_install_name }} 
      {{ virt_install_args|join(' ') }}
    when: virt_install_http_proxy is not defined
    delegate_to: "{{ virt_install_vmhost }}"

  - name: instala máquina virtual {{ virt_install_name }}
    connection: local
    shell: http_proxy="{{ virt_install_http_proxy }}" virt-install
      --connect qemu:///system 
      --name {{ virt_install_name }} 
      {{ virt_install_args|join(' ') }}
    when: virt_install_http_proxy is defined
    delegate_to: "{{ virt_install_vmhost }}"

  - name: aguarda porta tcp {{ virt_waitfor_port }} em {{ virt_install_ip }}
    connection: local
    wait_for:
      host: '{{ virt_install_ip }}'
      port: '{{ virt_waitfor_port }}'
      state: present
      timeout: '{{ virt_waitfor_timeout }}'
    when: 'virt_waitfor_port|d'

  - name: remove chave de ssh em know_hosts local
    connection: local
    failed_when: False
    command: ssh-keygen -R {{ virt_install_ip }}

  when: virt_install_name not in virt_vms.list_vms

- setup: {}